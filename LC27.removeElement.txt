# LC27.移除元素

给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

示例 1：

输入：nums = [3,2,2,3], val = 3
输出：2, nums = [2,2]
解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。

示例 2：

输入：nums = [0,1,2,2,3,0,4,2], val = 2
输出：5, nums = [0,1,4,0,3]
解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。



本题的关键在于, 数组的元素在内存地址中的地址是连续的,不能单独删除数组中的某个元素, 只能**覆盖**

```c++
//解法一:暴力解法
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int size = nums.size();
        for(int i = 0; i < size; ++i)
        {
            if(nums[i] == val)
            {
                for(int j = i+1; j < nums.size(); ++j)
                {
                    nums[j-1] = nums[j];
                }
                size--;
                i--;//由于数组前移, 所以i的下一轮要从删除的元素开始.
            }
        }
        return size;
    }
};
```



```c++
//解法二:快慢指针
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int slowIndex = 0; 
        for (int fastIndex = 0; fastIndex < nums.size(); fastIndex++) {  
            if (val != nums[fastIndex]) { 
                //两者不相等的时候进行赋值
                nums[slowIndex++] = nums[fastIndex]; 
            }
            else
            	continue;
        }
        return slowIndex;
    }
};
```

本道题的代码的写法非常巧妙:

1.如果是遇到例如3 2 2 2 3, 删除的是2的这样的序列, ,慢指针则一直停留在下标为1那, 直到fast抵达最后的3时, 才给慢指针指向的位置赋值, 最后返回慢指针.

2.没有将解题摆在相对位置上面, 而是直接按照序列顺序往下推. 而解法一就考虑了相对位置, 较为复杂.



# LC26.删除有序数组中的重复项

给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。

不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

示例 1：

输入：nums = [1,1,2]
输出：2, nums = [1,2]
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
示例 2：

输入：nums = [0,0,1,1,1,2,2,3,3,4]
输出：5, nums = [0,1,2,3,4]
解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。



```c++
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.size() <= 1) return nums.size();
        int i = 0;
        for(int j = 1; j < nums.size(); ++j)
        {
            if(nums[i] != nums[j])
            {
                nums[++i] = nums[j];
            }
            else
            {
                continue;//意味着两者相等, i的下一位已经可以被取代了.
            }
        }
        return ++i;
    }
};
```

本题是删除重复项, 和LC27的区别是: LC27是删除和val相同的值, 可以取代当前下表的值, 而本题是在删除数组中重复的值, 就需要双指针永远有间隔.



# LC283.移动零

给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

示例:

输入: [0,1,0,3,12]
输出: [1,3,12,0,0]

```c++
//解法一:不实际移动0, 而是将0直接替换掉
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int slowIndex = 0;
        for(int fastIndex = 0; fastIndex < nums.size(); ++fastIndex)
        {
            if(nums[fastIndex] != 0)
                nums[slowIndex++] = nums[fastIndex];
            
            else 
                continue;
        }

        for(int i = slowIndex; i < nums.size(); ++i)
        {
            nums[i] = 0;
        }
    }
};
```

解法一和LC27思路一致

```c++
//解法二:运用双指针的写法实际移动0.
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int slowIndex = 0;
        for(int fastIndex = 0; fastIndex < nums.size(); ++fastIndex)
        {
            if(nums[fastIndex])
            {
                swap(nums[slowIndex], nums[fastIndex]);
                slowIndex++;
            }
            else
            {
                continue;
            }
        }
    }
};
```



# LC844.比较含退格的字符串

给定 s 和 t 两个字符串，当它们分别被输入到空白的文本编辑器后，请你判断二者是否相等。# 代表退格字符。

如果相等，返回 true ；否则，返回 false 。

注意：如果对空文本输入退格字符，文本继续为空。

 

示例 1：

输入：s = "ab#c", t = "ad#c"
输出：true
解释：S 和 T 都会变成 “ac”。
示例 2：

输入：s = "ab##", t = "c#d#"
输出：true
解释：s 和 t 都会变成 “”。
示例 3：

输入：s = "a##c", t = "#a#c"
输出：true
解释：s 和 t 都会变成 “c”。
示例 4：

输入：s = "a#c", t = "b"
输出：false
解释：s 会变成 “c”，但 t 仍然是 “b”。

```c++
class Solution {
public:
    bool backspaceCompare(string S, string T) {
        int sSkipNum = 0; // 记录S的#数量
        int tSkipNum = 0; // 记录T的#数量
        int i = S.size() - 1;
        int j = T.size() - 1;
        while (1) {
            while (i >= 0) { // 从后向前，消除S的#
                if (S[i] == '#') sSkipNum++;
                else {
                    if (sSkipNum > 0) sSkipNum--;
                    else break;
                }
                i--;
            }
            while (j >= 0) { // 从后向前，消除T的#
                if (T[j] == '#') tSkipNum++;
                else {
                    if (tSkipNum > 0) tSkipNum--;
                    else break;
                }
                j--;
            }
            // 后半部分#消除完了，接下来比较S[i] != T[j]
            if (i < 0 || j < 0) break; // S 或者T 遍历到头了
            if (S[i] != T[j]) return false;
            i--;j--;
        }
        // 说明S和T同时遍历完毕
        if (i == -1 && j == -1) return true;
        return false;
    }
};

```

本题要用逆序遍历的方式才能通过, 因为'#'是向左边退格的, 必须要提前记录.
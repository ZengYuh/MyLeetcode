# LC27.移除元素

给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

示例 1：

输入：nums = [3,2,2,3], val = 3
输出：2, nums = [2,2]
解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。

示例 2：

输入：nums = [0,1,2,2,3,0,4,2], val = 2
输出：5, nums = [0,1,4,0,3]
解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。



本题的关键在于, 数组的元素在内存地址中的地址是连续的,不能单独删除数组中的某个元素, 只能**覆盖**

```c++
//解法一:暴力解法
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int size = nums.size();
        for(int i = 0; i < size; ++i)
        {
            if(nums[i] == val)
            {
                for(int j = i+1; j < nums.size(); ++j)
                {
                    nums[j-1] = nums[j];
                }
                size--;
                i--;//由于数组前移, 所以i的下一轮要从删除的元素开始.
            }
        }
        return size;
    }
};
```



```c++
//解法二:快慢指针
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int slowIndex = 0; 
        for (int fastIndex = 0; fastIndex < nums.size(); fastIndex++) {  
            if (val != nums[fastIndex]) { 
                //两者不相等的时候进行赋值
                nums[slowIndex++] = nums[fastIndex]; 
            }
            else
            	continue;
        }
        return slowIndex;
    }
};
```

本道题的代码的写法非常巧妙:

1.如果是遇到例如3 2 2 2 3, 删除的是2的这样的序列, ,慢指针则一直停留在下标为1那, 直到fast抵达最后的3时, 才给慢指针指向的位置赋值, 最后返回慢指针.

2.没有将解题摆在相对位置上面, 而是直接按照序列顺序往下推. 而解法一就考虑了相对位置, 较为复杂.



# LC26.删除排序数组中的重复项



